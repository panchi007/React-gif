{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGred.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputvalue","setValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","categorye","a","url","encodeURI","fetch","respuesta","json","data","gift","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGred","Data","learning","state","setstate","useEffect","then","setTimeout","useFetchGifs","key","GifExpertApp","categaries","ReactDOM","render","document","getElementById"],"mappings":"6MAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGfC,mBAAS,IAHM,mBAGvCC,EAHuC,KAG3BC,EAH2B,KA0B9C,OAEI,0BAAMC,SAbU,SAACC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA4BO,OAC1CN,EAAS,OAQT,6BACI,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAzBU,SAACP,GACvBF,EAASE,EAAEQ,OAAOF,a,uBCbbG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,gEAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAIIA,EAAUC,OAJd,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAEnB,MAAO,CAEHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAKzCa,QAAQC,IAAIR,GAhBO,kBAkBZA,GAlBY,4CAAH,sDCEPS,EAAc,SAAC,GAAwB,IAAtBf,EAAqB,EAArBA,IAAKU,EAAgB,EAAhBA,MAAgB,EAATD,GAMtC,OACI,yBAAKO,UAAU,QAEX,2BAAIN,GACJ,yBAAKO,IAAKjB,EAAKkB,IAAKR,MCNnBS,EAAU,SAAC,GAAmB,IAAjBrB,EAAgB,EAAhBA,UAAgB,ECAd,SAACA,GAAe,IAAD,EAGbd,mBAAS,CAG/BoC,KAAM,GAENC,UAAU,IARyB,mBAGhCC,EAHgC,KAGzBC,EAHyB,KAoCvC,OAvBAC,qBAAU,WAEN3B,EAAQ,CAACC,IACJ2B,MAAK,SAAAjB,GAEFkB,YAAW,WAEPb,QAAQC,IAAIN,GACZe,EAAS,CACLH,KAAMZ,EAENa,UAAU,MAGf,UAIZ,CAACvB,IAKGwB,EDjCoBK,CAAa7B,GAAhCsB,EAH8B,EAG9BA,KAH8B,EAGxBC,SAkBd,OACI,oCACI,4BAAKvB,GAGL,6BAEQsB,EAAKb,KAAI,SAAAC,GAAG,OAER,kBAAC,EAAD,eACIoB,IAAKpB,EAAIC,IACLD,UEhCnBqB,EAAe,WAAO,IAAD,EAEM7C,mBAAS,CAAC,WAFhB,mBAEvB8C,EAFuB,KAEX/C,EAFW,KAS9B,OACI,6BACI,4CACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BAEQ+C,EAAWvB,KAAI,SAACT,GAAD,OACX,kBAAC,EAAD,CAASA,UAAWA,EAChB8B,IAAK9B,UCfjCiC,IAASC,OAIL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.74381642.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport const AddCategory = ({ setcategories }) => {\r\n\r\n\r\n    const [inputvalue, setValue] = useState('')\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////\r\n\r\n    const handleinpurChange = (e) => {\r\n        setValue(e.target.value)\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////////////\r\n\r\n    const andledubmid = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (inputvalue.trim().length > 2) {\r\n            // console.log('submid hecho')\r\n            setcategories((cats) => [ inputvalue , ...cats])\r\n            setValue('')\r\n        }\r\n    }\r\n\r\n    /////////////////////////////////////////////////////////////////////\r\n    return (\r\n\r\n        <form onSubmit={andledubmid}>\r\n            <div>\r\n                <input\r\n                    type='text'\r\n                    value={inputvalue}\r\n                    onChange={handleinpurChange}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n/////////////////////////////////////////////////////////////////////\r\n\r\nAddCategory.propTypes = {\r\n    setcategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (categorye) => {\r\n\r\n    const url = `http://api.giphy.com/v1/gifs/search?q= ${encodeURI(categorye)}&limit=100&api_key=Y8lfMQ7O1zPm2K89wQJehUlkM0OMtONU`\r\n    const respuesta = await fetch(url)\r\n    const { data } = await respuesta.json()\r\n    const gift = data.map((img) => {\r\n\r\n        return {\r\n\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n\r\n        }\r\n    })\r\n\r\n    console.log(gift)\r\n    \r\n    return gift\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ url, title, id }) => {\r\n\r\n\r\n    //console.log(props.img)\r\n    ////////////////////////////////////////////////////////\r\n\r\n    return (\r\n        <div className=\"card\">\r\n\r\n            <p>{title}</p>\r\n            <img src={url} alt={title} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\n\r\n\r\nexport const GifGred = ({ categorye }) => {\r\n\r\n\r\n    const { Data, learning } = useFetchGifs(categorye)\r\n\r\n    // const [imeges, setimages] = useState([])\r\n\r\n    ///////////////////////////////////////////////////////////////////\r\n\r\n    // useEffect(() => {\r\n\r\n    //      getGifs(categorye).then(setimages)\r\n\r\n    // }, [])\r\n\r\n    ///////////////////////////////////////////////////////////////////\r\n\r\n\r\n    /////////////////////////////////////////////////////////////////////////\r\n    // GetGifs()\r\n\r\n    return (\r\n        <>\r\n            <h3>{categorye}</h3>\r\n\r\n\r\n            <div>\r\n                {\r\n                    Data.map(img => (\r\n\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\n\r\n\r\n\r\nexport const useFetchGifs = (categorye) => {\r\n\r\n\r\n    const [state, setstate] = useState({\r\n\r\n\r\n        Data: [],\r\n\r\n        learning: true\r\n\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs([categorye])\r\n            .then(img => {\r\n\r\n                setTimeout(() => {\r\n\r\n                    console.log(img)\r\n                    setstate({\r\n                        Data: img,\r\n\r\n                        learning: true\r\n                    })\r\n\r\n                }, 3000)\r\n\r\n            })\r\n\r\n    }, [categorye])\r\n\r\n\r\n\r\n\r\n    return state\r\n\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\n\r\nimport { GifGred } from './components/GifGred'\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categaries, setcategories] = useState(['marvel'])\r\n\r\n    // const llamar = () =>{\r\n    //     setcategories([...categaries, 'dsadsa'])\r\n    //}\r\n\r\n    /////////////////////////////////////////////////////////////////////\r\n    return (\r\n        <div>\r\n            <h2>GigExpertApp</h2>\r\n            <hr />\r\n            <AddCategory setcategories={setcategories} />\r\n            <ol>\r\n                {\r\n                    categaries.map((categorye) => (\r\n                        <GifGred categorye={categorye}\r\n                            key={categorye}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\n\n\n\nReactDOM.render(\n\n  \n \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}